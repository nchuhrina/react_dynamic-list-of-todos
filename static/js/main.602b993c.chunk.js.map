{"version":3,"sources":["api.ts","ToDo.tsx","ToDoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","res","json","data","getUsers","getTodos","getPreparedTodos","users","todos","map","todo","find","user","id","userId","TodoItem","className","title","name","completed","TodoList","key","App","useState","isLoaded","setLoad","isLoading","setLoading","setTodos","sortType","setSortType","visibleTodos","useMemo","sort","b","localeCompare","getVisibleTodos","type","onClick","then","ReactDOM","render","document","getElementById"],"mappings":"ySAIMA,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACIC,MAAMF,GADV,cACRG,EADQ,gBAEKA,EAAIC,OAFT,cAERC,EAFQ,yBAIPA,GAJO,2CAAH,sDAOPC,EAAQ,uCAAG,sBAAAL,EAAA,+EACRF,EAZY,+CAWJ,2CAAH,qDAIRQ,EAAQ,uCAAG,sBAAAN,EAAA,+EACRF,EAfY,+CAcJ,2CAAH,qDAIDS,EAAgB,uCAAG,8BAAAP,EAAA,sEACVK,IADU,cACxBG,EADwB,gBAEVF,IAFU,cAExBG,EAFwB,yBAIvBA,EAAMC,KAAI,SAACC,GAAD,mBAAC,eACbA,GADY,IAEfH,MAAOA,EAAMI,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAOH,EAAKI,gBANjB,2CAAH,qDCbhBC,EAA4B,SAAC,GAAa,IAAXL,EAAU,EAAVA,KAC1C,OACE,oCACE,wBAAIM,UAAU,MAAMN,EAAKG,IACzB,wBAAIG,UAAU,SAASN,EAAKO,OAC5B,wBAAID,UAAU,QAAQN,EAAKH,MAAMW,MACjC,wBAAIF,UAAWN,EAAKS,UAChB,QACA,QAEDT,EAAKS,UACF,cACA,eCVCC,EAA4B,SAAC,GAAe,IAAbZ,EAAY,EAAZA,MAC1C,OACE,oCAEGA,EAAMC,KAAI,SAAAC,GAAI,OACb,wBAAIW,IAAKX,EAAKG,GAAIG,UAAU,aAC1B,kBAAC,EAAD,CAAUN,KAAMA,UC8FXY,EAvFO,WAAO,IAAD,EACEC,oBAAkB,GADpB,mBACnBC,EADmB,KACTC,EADS,OAEMF,oBAAkB,GAFxB,mBAEnBG,EAFmB,KAERC,EAFQ,OAGAJ,mBAAwB,IAHxB,mBAGnBf,EAHmB,KAGZoB,EAHY,OAIML,mBAAS,IAJf,mBAInBM,EAJmB,KAITC,EAJS,KAepBC,EAAeC,mBAAQ,WAC3B,OAhCoB,SAACxB,EAAsBqB,GAC7C,OAAQA,GACN,IAAK,QACH,OAAO,YAAIrB,GAAOyB,MAAK,SAAClC,EAAGmC,GAAJ,OAAUnC,EAAEkB,MAAMkB,cAAcD,EAAEjB,UAE3D,IAAK,YACH,OAAO,YAAIT,GAAOyB,MAAK,SAAClC,EAAGmC,GAAJ,OAAWnC,EAAEoB,WAAae,EAAEf,aAErD,IAAK,WACH,OAAO,YAAIX,GAAOyB,MAAK,SAAClC,EAAGmC,GAAJ,OAAUnC,EAAEQ,MAAMW,KAAKiB,cAAcD,EAAE3B,MAAMW,SAEtE,QACE,OAAOV,GAoBF4B,CAAgB5B,EAAOqB,KAC7B,CAACrB,EAAOqB,IAEX,OACE,oCACE,wBAAIb,UAAU,QAAd,yBAIGQ,EASC,2BAAOR,UAAU,cACf,wBAAIA,UAAU,oBAEZ,4BACE,4BACEqB,KAAK,SACLrB,UAAU,SACVsB,QAAS,kBAAMR,EAAY,OAH7B,UAQF,4BACE,4BACEO,KAAK,SACLrB,UAAU,SACVsB,QAAS,kBAAMR,EAAY,WAH7B,kBASF,4BACE,4BACEO,KAAK,SACLrB,UAAU,SACVsB,QAAS,kBAAMR,EAAY,cAH7B,iBAQF,4BACE,4BACEO,KAAK,SACLrB,UAAU,SACVsB,QAAS,kBAAMR,EAAY,eAH7B,uBAUJ,kBAAC,EAAD,CAAUtB,MAAOuB,KAlDnB,4BACEM,KAAK,SACLrB,UAAU,kBACVsB,QAvBW,WACnBX,GAAW,GACXrB,IAAmBiC,MAAK,SAAC7B,GACvBkB,EAASlB,GACTe,GAAQ,GACRE,GAAW,QAoBJD,EAAY,aAAe,mBChDxCc,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.602b993c.chunk.js","sourcesContent":["const USER_API_URL = 'https://jsonplaceholder.typicode.com/users';\nconst TODO_API_URL = 'https://jsonplaceholder.typicode.com/todos';\n\n\nconst getData = async (url: string) => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n};\n\nconst getUsers = async (): Promise<Users> => {\n  return getData(USER_API_URL);\n};\n\nconst getTodos = async (): Promise<Todos> => {\n  return getData(TODO_API_URL);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodos> => {\n  const users = await getUsers();\n  const todos = await getTodos();\n\n  return todos.map((todo) => ({\n    ...todo,\n    users: users.find((user) => user.id === todo.userId) as User,\n  }));\n\n};\n","import React from 'react';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo}) => {\n  return (\n    <>\n      <td className=\"id\">{todo.id}</td>\n      <td className=\"title\">{todo.title}</td>\n      <td className=\"user\">{todo.users.name}</td>\n      <td className={todo.completed\n        ? 'ready'\n        : 'work'}\n      >\n        {todo.completed\n          ? '  completed'\n          : '  in work'}\n      </td>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './ToDo';\n\ninterface Props {\n  todos: PreparedTodos;\n\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n\n      {todos.map(todo => (\n        <tr key={todo.id} className=\"list-item\">\n          <TodoItem todo={todo} />\n        </tr>\n      ))}\n    </>\n  );\n};\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { getPreparedTodos } from './api';\nimport { TodoList } from './ToDoList';\n\nconst getVisibleTodos = (todos: PreparedTodos, sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'completed':\n      return [...todos].sort((a, b) => +a.completed - +b.completed);\n\n    case 'userName':\n      return [...todos].sort((a, b) => a.users.name.localeCompare(b.users.name));\n\n    default:\n      return todos;\n  }\n};\n\nconst App: React.FC = () => {\n  const [isLoaded, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useState<PreparedTodos>([]);\n  const [sortType, setSortType] = useState('');\n\n  const downloadData = () => {\n    setLoading(true);\n    getPreparedTodos().then((todo) => {\n      setTodos(todo);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <>\n      <h1 className=\"head\">\n        Dynamic list of TODOs\n      </h1>\n      {\n        !isLoaded ? (\n          <button\n            type=\"button\"\n            className=\"button download\"\n            onClick={downloadData}\n          >\n            {isLoading ? 'Loading...' : 'Download Data'}\n          </button>\n        ) : (\n          <table className=\"data_table\">\n            <tr className=\"button-container\">\n\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setSortType(' ')}\n                >\n                  Reset\n                </button>\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setSortType('title')}\n                >\n                  Sort by title\n                </button>\n              </td>\n\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setSortType('userName')}\n                >\n                  Sort by user\n                </button>\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setSortType('completed')}\n                >\n                  Sort by completed\n                </button>\n              </td>\n            </tr>\n\n            <TodoList todos={visibleTodos} />\n\n          </table>\n\n\n        )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}