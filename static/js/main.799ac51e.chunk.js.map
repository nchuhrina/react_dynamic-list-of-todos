{"version":3,"sources":["api.ts","ToDo.tsx","ToDoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","res","json","data","getUsers","getTodos","getPreparedTodos","users","todos","map","todo","find","user","id","userId","TodoItem","className","title","name","completed","TodoList","handleSort","type","onClick","key","App","useState","isLoaded","setLoad","isLoading","setLoading","setTodos","sort","b","localeCompare","then","ReactDOM","render","document","getElementById"],"mappings":"ySAIMA,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACIC,MAAMF,GADV,cACRG,EADQ,gBAEKA,EAAIC,OAFT,cAERC,EAFQ,yBAIPA,GAJO,2CAAH,sDAOPC,EAAQ,uCAAG,sBAAAL,EAAA,+EACRF,EAZY,+CAWJ,2CAAH,qDAIRQ,EAAQ,uCAAG,sBAAAN,EAAA,+EACRF,EAfY,+CAcJ,2CAAH,qDAIDS,EAAgB,uCAAG,8BAAAP,EAAA,sEACVK,IADU,cACxBG,EADwB,gBAEVF,IAFU,cAExBG,EAFwB,yBAIvBA,EAAMC,KAAI,SAACC,GAAD,mBAAC,eACbA,GADY,IAEfH,MAAOA,EAAMI,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAOH,EAAKI,gBANjB,2CAAH,qDCbhBC,EAA4B,SAAC,GAAc,IAAZL,EAAW,EAAXA,KAC1C,OACE,oCACE,wBAAIM,UAAU,MAAMN,EAAKG,IACzB,wBAAIG,UAAU,SAASN,EAAKO,OAC5B,wBAAID,UAAU,QAAQN,EAAKH,MAAMW,MACjC,wBAAIF,UAAWN,EAAKS,UAChB,QACA,QAEDT,EAAKS,UACF,cACA,eCVCC,EAA4B,SAAC,GAA2B,IAAzBZ,EAAwB,EAAxBA,MAAOa,EAAiB,EAAjBA,WACjD,OACE,oCACE,2BAAOL,UAAU,cACf,wBAAIA,UAAU,oBACZ,4BACE,4BACEM,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMF,EAAW,QAH5B,eASF,4BACE,4BACEC,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMF,EAAW,WAH5B,kBAQF,4BACE,4BACEC,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMF,EAAW,UAH5B,iBAQF,4BACE,4BACEC,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMF,EAAW,eAH5B,uBASHb,EAAMC,KAAI,SAAAC,GAAI,OACb,wBAAIc,IAAKd,EAAKG,GAAIG,UAAU,aAC1B,kBAAC,EAAD,CAAUN,KAAMA,WCcbe,EA9DO,WAAO,IAAD,EACEC,oBAAkB,GADpB,mBACnBC,EADmB,KACTC,EADS,OAEMF,oBAAkB,GAFxB,mBAEnBG,EAFmB,KAERC,EAFQ,OAGAJ,mBAAwB,IAHxB,mBAGnBlB,EAHmB,KAGZuB,EAHY,KAqC1B,OACE,oCACE,wBAAIf,UAAU,QAAd,yBAIGW,EASC,kBAAC,EAAD,CACEnB,MAAOA,EACPa,WAxCS,SAACW,GAClB,OAAQA,GACN,IAAK,OACH,OAAOD,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEQ,MAAMW,KAAKgB,cAAcD,EAAE1B,MAAMW,UAEvD,IAAK,QACH,OAAOa,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEkB,MAAMiB,cAAcD,EAAEhB,WAE5C,IAAK,YACH,OAAOc,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAWlC,EAAEoB,WAAac,EAAEd,cAEtC,IAAK,KACH,OAAOY,EAAS,YAAIvB,GACjBwB,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEc,GAAKoB,EAAEpB,OAE7B,QACE,OAAOL,MAWL,4BACEc,KAAK,SACLN,UAAU,kBACVO,QA1CW,WACnBO,GAAW,GACXxB,IAAmB6B,MAAK,SAACzB,GACvBqB,EAASrB,GACTkB,GAAQ,GACRE,GAAW,QAuCJD,EAAY,aAAe,mBClDxCO,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.799ac51e.chunk.js","sourcesContent":["const USER_API_URL = 'https://jsonplaceholder.typicode.com/users';\nconst TODO_API_URL = 'https://jsonplaceholder.typicode.com/todos';\n\n\nconst getData = async (url: string) => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n};\n\nconst getUsers = async (): Promise<Users> => {\n  return getData(USER_API_URL);\n};\n\nconst getTodos = async (): Promise<Todos> => {\n  return getData(TODO_API_URL);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodos> => {\n  const users = await getUsers();\n  const todos = await getTodos();\n\n  return todos.map((todo) => ({\n    ...todo,\n    users: users.find((user) => user.id === todo.userId) as User,\n  }));\n};\n","import React from 'react';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  return (\n    <>\n      <td className=\"id\">{todo.id}</td>\n      <td className=\"title\">{todo.title}</td>\n      <td className=\"user\">{todo.users.name}</td>\n      <td className={todo.completed\n        ? 'ready'\n        : 'work'}\n      >\n        {todo.completed\n          ? '  completed'\n          : '  in work'}\n      </td>\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './ToDo';\n\ninterface Props {\n  todos: PreparedTodos;\n  handleSort: (todo: string) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, handleSort }) => {\n  return (\n    <>\n      <table className=\"data_table\">\n        <tr className=\"button-container\">\n          <td>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => handleSort('id')}\n            >\n              Sort by id\n            </button>\n          </td>\n\n          <td>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => handleSort('title')}\n            >\n              Sort by title\n            </button>\n          </td>\n          <td>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => handleSort('name')}\n            >\n              Sort by name\n            </button>\n          </td>\n          <td>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => handleSort('completed')}\n            >\n              Sort by completed\n            </button>\n          </td>\n        </tr>\n        {todos.map(todo => (\n          <tr key={todo.id} className=\"list-item\">\n            <TodoItem todo={todo} />\n          </tr>\n        ))}\n      </table>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getPreparedTodos } from './api';\nimport { TodoList } from './ToDoList';\n\nconst App: React.FC = () => {\n  const [isLoaded, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [todos, setTodos] = useState<PreparedTodos>([]);\n\n  const downloadData = () => {\n    setLoading(true);\n    getPreparedTodos().then((todo) => {\n      setTodos(todo);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n  const handleSort = (sort: string) => {\n    switch (sort) {\n      case 'name':\n        return setTodos([...todos]\n          .sort((a, b) => a.users.name.localeCompare(b.users.name)));\n\n      case 'title':\n        return setTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n\n      case 'completed':\n        return setTodos([...todos]\n          .sort((a, b) => +a.completed - +b.completed));\n\n      case 'id':\n        return setTodos([...todos]\n          .sort((a, b) => a.id - b.id));\n\n      default:\n        return todos;\n    }\n  };\n\n  return (\n    <>\n      <h1 className=\"head\">\n        Dynamic list of TODOs\n      </h1>\n      {\n        !isLoaded ? (\n          <button\n            type=\"button\"\n            className=\"button download\"\n            onClick={downloadData}\n          >\n            {isLoading ? 'Loading...' : 'Download Data'}\n          </button>\n        ) : (\n          <TodoList\n            todos={todos}\n            handleSort={handleSort}\n          />\n        )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}